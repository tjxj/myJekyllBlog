

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>玩机器学习的章北海</title>
  <subtitle>机器学习算法与Python实战，玩机器学习，但又不止关注机器学习</subtitle>
  <updated>2024-01-02T13:26:37+08:00</updated>
  <author>
    <name>玩机器学习的章北海</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 玩机器学习的章北海 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>机器学习周刊04-动手实战人工智能</title>
    <link href="http://localhost:4000/posts/%E5%8A%A8%E6%89%8B%E5%AE%9E%E6%88%98%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/" rel="alternate" type="text/html" title="机器学习周刊04-动手实战人工智能" />
    <published>2024-01-01T14:10:00+08:00</published>
  
    <updated>2024-01-01T14:10:00+08:00</updated>
  
    <id>http://localhost:4000/posts/%E5%8A%A8%E6%89%8B%E5%AE%9E%E6%88%98%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/</id>
    <content src="http://localhost:4000/posts/%E5%8A%A8%E6%89%8B%E5%AE%9E%E6%88%98%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/" />
    <author>
      <name>老章mlpy</name>
    </author>

  
    
    <category term="机器学习周刊" />
    
  

  
    <summary>
      





      

LLM开发者必读论文：检索增强（RAG）生成技术综述！

目录：


  1、动手实战人工智能 Hands-on Al
  2、huggingface的NLP、深度强化学习、语音课
  3、Awesome Jupyter
  4、计算机科学热门论文
  5、LLM开发者必读论文:检索增强 (RAG) 生成技术综述
  6、Apple 公布了多模态大型语言模型 Ferret
  7、免费的基于ChatGPT API的安卓端语音助手
  8、每日数学
  9、WhisperLive:接近实时的 Whisper 实现
  10、Unsloth：大模型训练速度和效率加速工具
  11、最后推荐三个AI工具


1、动手实战人工智能 Hands-on AI

地址：https://ai.huhuhang.com/intro

这个《动手实战人工智能 Hands-on AI》写的相当不错，作...
    </summary>
  

  </entry>

  
  <entry>
    <title>Python处理电子表格，4个非常流行且功能强大的库</title>
    <link href="http://localhost:4000/posts/Python%E5%A4%84%E7%90%86%E8%A1%A8%E6%A0%BC%E7%9B%B8%E5%85%B3%E7%9A%84%E5%BA%93/" rel="alternate" type="text/html" title="Python处理电子表格，4个非常流行且功能强大的库" />
    <published>2024-01-01T14:10:00+08:00</published>
  
    <updated>2024-01-01T14:10:00+08:00</updated>
  
    <id>http://localhost:4000/posts/Python%E5%A4%84%E7%90%86%E8%A1%A8%E6%A0%BC%E7%9B%B8%E5%85%B3%E7%9A%84%E5%BA%93/</id>
    <content src="http://localhost:4000/posts/Python%E5%A4%84%E7%90%86%E8%A1%A8%E6%A0%BC%E7%9B%B8%E5%85%B3%E7%9A%84%E5%BA%93/" />
    <author>
      <name>老章mlpy</name>
    </author>

  
    
    <category term="Python系列" />
    
  

  
    <summary>
      





      在Python中处理表格数据，有几个非常流行且功能强大的库。以下是一些最常用的库及其示例代码：

1. Pandas

Pandas是一个开放源代码的、BSD许可的库，为Python编程语言提供高性能、易于使用的数据结构和数据分析工具。

安装Pandas

pip install pandas


示例代码：读取CSV文件

import pandas as pd

# 读取CSV文件
df = pd.read_csv('pokemon.csv')

# 显示前五行数据
print(df.head())

# 计算某列的平均值
print("Average of column:", df['Speed'].mean())

# 数据筛选
filtered_df = df[df['Speed'] &amp;gt; 10]

# 将更改后的DataFrame保存到新的CSV文件
filtere...
    </summary>
  

  </entry>

  
  <entry>
    <title>Python处理word文档，相关的库</title>
    <link href="http://localhost:4000/posts/Python%E5%A4%84%E7%90%86word%E6%96%87%E6%A1%A3-%E7%9B%B8%E5%85%B3%E7%9A%84%E5%BA%93/" rel="alternate" type="text/html" title="Python处理word文档，相关的库" />
    <published>2024-01-01T14:10:00+08:00</published>
  
    <updated>2024-01-01T14:10:00+08:00</updated>
  
    <id>http://localhost:4000/posts/Python%E5%A4%84%E7%90%86word%E6%96%87%E6%A1%A3-%E7%9B%B8%E5%85%B3%E7%9A%84%E5%BA%93/</id>
    <content src="http://localhost:4000/posts/Python%E5%A4%84%E7%90%86word%E6%96%87%E6%A1%A3-%E7%9B%B8%E5%85%B3%E7%9A%84%E5%BA%93/" />
    <author>
      <name>老章mlpy</name>
    </author>

  
    
    <category term="Python系列" />
    
  

  
    <summary>
      





      当然，Python社区提供了多个库来处理Word文档，主要用于创建、修改和读取Word文件。以下是一些常用的库：


  python-docx：用于创建和修改.docx文件。
  docx2txt：将.docx文件转换成纯文本。
  pywin32 (仅限Windows)：通过Microsoft Word应用程序接口与Word文档交互。


python-docx

python-docx 是一个创建和更新Microsoft Word (.docx)文件的Python库。这里有一个简单的例子，展示如何使用 python-docx 创建一个包含一段文本的Word文档：

from docx import Document

# 创建一个Word文档对象
doc = Document()

# 向文档添加一个段落
doc.add_paragraph('Hello, this is a ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Python 处理音频，两个重要的库</title>
    <link href="http://localhost:4000/posts/Python%E4%B8%AD%E9%9F%B3%E9%A2%91%E5%A4%84%E7%90%86%E5%BA%93/" rel="alternate" type="text/html" title="Python 处理音频，两个重要的库" />
    <published>2024-01-01T14:10:00+08:00</published>
  
    <updated>2024-01-01T14:10:00+08:00</updated>
  
    <id>http://localhost:4000/posts/Python%E4%B8%AD%E9%9F%B3%E9%A2%91%E5%A4%84%E7%90%86%E5%BA%93/</id>
    <content src="http://localhost:4000/posts/Python%E4%B8%AD%E9%9F%B3%E9%A2%91%E5%A4%84%E7%90%86%E5%BA%93/" />
    <author>
      <name>老章mlpy</name>
    </author>

  
    
    <category term="Python系列" />
    
  

  
    <summary>
      





      pyaudio和sounddevice都是用于Python中音频处理和流的库，允许用户通过他们的API录制、播放和处理音频数据。下面是对这两个库的简要介绍：

PyAudio

PyAudio 提供了 Python 绑定到 PortAudio，这是一个跨平台的音频I/O库。它允许你很容易地使用Python语言进行音频录制和播放。

特点:


  跨平台（工作在Unix/Linux、MacOS和Windows上）
  允许你直接访问声卡或其他音频接口，例如通过麦克风录制声音或者向扬声器输出声音
  支持阻塞和非阻塞流
  提供了详细的错误信息和音频流状态


典型用途:


  音频录制和播放
  音频信号处理
  实现音频应用，如语音识别和合成


示例代码:

import pyaudio
import wave

# 打开WAV文件
wf = wave.open('file.w...
    </summary>
  

  </entry>

  
  <entry>
    <title>Python 处理纯文本，12个常用的库</title>
    <link href="http://localhost:4000/posts/Python%E4%B8%AD%E7%BA%AF%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E7%9B%B8%E5%85%B3%E7%9A%84%E5%BA%93/" rel="alternate" type="text/html" title="Python 处理纯文本，12个常用的库" />
    <published>2024-01-01T14:10:00+08:00</published>
  
    <updated>2024-01-01T14:10:00+08:00</updated>
  
    <id>http://localhost:4000/posts/Python%E4%B8%AD%E7%BA%AF%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E7%9B%B8%E5%85%B3%E7%9A%84%E5%BA%93/</id>
    <content src="http://localhost:4000/posts/Python%E4%B8%AD%E7%BA%AF%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E7%9B%B8%E5%85%B3%E7%9A%84%E5%BA%93/" />
    <author>
      <name>老章mlpy</name>
    </author>

  
    
    <category term="Python系列" />
    
  

  
    <summary>
      





      Python 提供了多种库来处理纯文本数据，这些库可以应对从基本文本操作到复杂文本分析的各种需求。以下是一些常用的纯文本处理相关的库：


  str 类型: Python 内建的字符串类型提供了许多简便的方法来进行基础文本处理，如分割、连接、替换文本等。


# 分割字符串
text = "hello, world"
print(text.split(","))  # 输出：['hello', ' world']

# 连接字符串
words = ["Python", "is", "awesome"]
print(" ".join(words))  # 输出：Python is awesome

# 替换字符串中的子字符串
text = "Hello World"
print(text.replace("World", "Python"))  # 输出：Hello Python

...
    </summary>
  

  </entry>

</feed>


